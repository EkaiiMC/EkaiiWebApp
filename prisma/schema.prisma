datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "postgresqlExtensions"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  role          Role      @default(USER)
  emailVerified DateTime?
  image         String?
  Session       Session[]
  Account       Account?
  votes         Vote[]
  projects      Project[]
  tasks         Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  MEMBER
  WHITELISTER
  DESIGNER
  DEVELOPER
  MAINTAINER
}

model Vote {
  id     String   @id @default(cuid())
  user   User     @relation(fields: [userId], references: [id])
  userId String
  site   VoteSite @relation(fields: [siteId], references: [id])
  siteId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GalleryItem {
  id          String  @id @default(cuid())
  title       String
  description String?
  imagePath   String
  author      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  name      String   @unique
  scopes    Json? // see ApiScope interface
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  logs      ApiLog[]
}

model ApiLog {
  id            String   @id @default(cuid())
  apiKey        ApiKey   @relation(fields: [apiKeyId], references: [id])
  apiKeyId      String
  requestUrl    String
  requestMethod String
  responseCode  Int
  responseTime  Int
  responseText  String?
  createdAt     DateTime @default(now())
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  authors     User[]
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  assignee    User?      @relation(fields: [assigneeId], references: [id])
  assigneeId  String?
  project     Project    @relation(fields: [projectId], references: [id])
  projectId   String
  status      TaskStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  DONE
}

model VoteSite {
  id        String   @id @default(cuid())
  title     String   @unique
  url       String   @unique
  votes     Vote[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

view Leaderboard {
  username  String @unique
  voteCount Int
}
